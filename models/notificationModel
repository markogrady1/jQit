var mongoClient = require("mongodb").MongoClient;



var notification = {};



notification.getAllUsers = function(callback) {
    connection("user", function(db){
        db.collection("users").find({}, {}).toArray(function(err, doc) {
            if (err) throw err;
            callback(doc)
            db.close();
        });
    });
};

notification.getEmailAlerts = function(username, email, callback) {
    var arr = [];
    connection("user", function(db){
        db.collection("repoFlag").find({
            username:username,
            email:email,
            receive_email: "true",
            repository_target: {$ne: null },
            $or: [ { issues_boundary: {$ne: "0" } }, { pulls_boundary: {$ne: "0" } } ]

        }, {}).toArray(function(err, doc) {
            if (err) throw err;
            if(doc.length !== 0) {
                callback(doc)
            } else {
                var data = {
                    "username": "none",
                    "email": "none",
                    "avatar": "none",
                    "repository_target": "none",
                    "receive_email": "false",
                    "highlight_issues_chart": "false",
                    "highlight_pulls_chart": "false",
                    "issues_boundary": "0",
                    "pulls_boundary": "0",
                    "show_every_increase": "false"
                }

                arr.push(data)
                callback(arr)
            }

            db.close();
        });
    });
};

notification.getTeamEmailAlerts = function(username, email, callback) {
    var arr = [];
    connection("user", function(db){
        db.collection("teamFlag").find({
            username:username,
            email:email,
            receive_email: "true",
            team_target: {$ne: null },
            $or: [ { issues_team_boundary: {$ne: "0" } }, { pulls_team_boundary: {$ne: "0" } } ]

        }, {}).toArray(function(err, doc) {
            if (err) throw err;
            if(doc.length !== 0) {
                callback(doc)
            } else {
                var data = {
                    "username": "none",
                    "email": "none",
                    "avatar": "none",
                    "team_target": "none",
                    "receive_email": "false",
                    "highlight_team_issues_chart": "false",
                    "highlight_team_pulls_chart": "false",
                    "issues_team_boundary": "0",
                    "pulls_team_boundary": "0",
                    "show_team_every_increase": "false"
                }
                arr.push(data)
                callback(arr)
            }
            db.close();
        });
    });
};

notification.getContentEmailAlerts = function(username, email, callback) {
    var arr = [];
    connection("user", function(db){
        db.collection("contentTeamFlag").find({
            username:username,
            email:email,
            receive_email: "true",
            content_team_target: {$ne: null },
            $or: [ { issues_content_team_boundary: {$ne: "0" } }, { pulls_content_team_boundary: {$ne: "0" } } ]

        }, {}).toArray(function(err, doc) {
            if (err) throw err;
            if(doc.length !== 0) {
                callback(doc)
            } else {
                var data = {
                    "username": "none",
                    "email": "none",
                    "avatar": "none",
                    "content_team_target": "none",
                    "receive_email": "false",
                    "highlight_content_team_issues_chart": "false",
                    "highlight_content_team_pulls_chart": "false",
                    "issues_content_team_boundary": "0",
                    "pulls_content_team_boundary": "0",
                    "show_content_team_every_increase": "false"
                }
                arr.push(data)
                callback(arr)

            }
            db.close();
        });
    });
};



notification.getRepoIssueHistory = function(target, callback) {
    connection("repoHistory", function(db){
        db.collection(target).find({}, {}).toArray(function(err, doc) {
            if (err) throw err;
            callback(doc)
            db.close();
        });
    });
}


notification.getRepoPullsHistory = function(target, callback) {
    connection("repoPullsHistory", function(db){
        db.collection(target).find({}, {}).toArray(function(err, doc) {
            if (err) throw err;
            callback(doc)
            db.close();
        });
    });
}
/**
 * connect to a given database via mongodb
 *
 * @param {String} dbase
 * @param {Function} callback
 */
var connection = function(dbase, callback) {
    mongoClient.connect("mongodb://127.0.0.1:27017/" + dbase, function(err, db) {
        if (err) throw err;
        callback(db)
    });
};


module.exports = notification;